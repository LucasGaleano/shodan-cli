#! /usr/bin/env python3

from shodan import Shodan
from loggingHelper import logger
import json
from repository import Repository, TypeService
from sendMail import send_email_plain
import argparse

parser = argparse.ArgumentParser(description='Fetch data from Shodan API.')
parser.add_argument('--email-vulns', action='store_true', help='send the vulnerabilities by email')
args = parser.parse_args()


import configparser
config = configparser.ConfigParser()
config.read('shodan.conf')


def get_data(banner, field):
    try:
        if field == 'hostnames':
            return banner[field][0]
        return banner[field]
    except:
        return '-'

def log_json(jsonFile, content):
    json_file.write(json.dumps(content))
    json_file.write('\n')

def send_vulns_by_email(banner):

    ip = get_data(banner, 'ip_str')
    port = get_data(banner, 'port')
    protocol = get_data(banner, 'transport')

    len(banner['vulns'].items())
    logger.info(f"Reporting vulnerabilities to {config['email']['to']}")

    message = ''
    message += f"{ip} {port}/{protocol}\n\n"

    for key, data in banner['vulns'].items():
        message += key + '\n'
        message += 'cvss: ' + data['cvss'] +  '\n'
        message += 'verified: ' + str(data['verified']) +  '\n'
        message += 'Summary:\n' + data['summary'] +  '\n'
        message += '\n'

    send_email_plain(config['email']['from'], 
                    config['email']['to'], 
                    config['email']['subject'], 
                    message, 
                    config['email']['server'])

logger.info('Starting shodan client.')

API_KEY = config['shodan']['token']
api = Shodan(API_KEY)

json_file = open('log.json','a')
repo = Repository('ddbb')
typeService = TypeService()



while True:
    try:
        for banner in api.stream.alert():
            timestamp = get_data(banner, 'timestamp')
            hostname = get_data(banner, 'hostnames')
            ip = get_data(banner, 'ip_str')
            port = get_data(banner, 'port')
            protocol = get_data(banner, 'transport')
            data = get_data(banner, 'data').replace('\n', ' ').replace('\r', '')

            if repo.is_new_service(ip, port, protocol):
                repo.add_new_service(ip, port, protocol)
                logger.info(f'type={typeService.NEW} hostname={hostname} ip={ip} port={port} protocol={protocol} data={data}')

            logger.info(f'type={typeService.type(port)} hostname={hostname} ip={ip} port={port} protocol={protocol} data={data}')
            
            if args.email_vulns and 'vulns' in banner:
                logger.info(f"Found {len(banner['vulns'].items())} vulnerabilities on {ip} {port}/{protocol}")
                send_vulns_by_email(banner)

            log_json(json_file, banner)
    except Exception as e:
        print(f"[-] Error: {e}")

